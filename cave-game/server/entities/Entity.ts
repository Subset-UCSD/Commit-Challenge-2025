import * as phys from "cannon-es";
import { mat4 } from "gl-matrix";

import { SERVER_GAME_TICK } from "../../communism/constants";
import { EntityModel, ModelInstance } from "../../communism/messages";
import { Vector3 } from "../../communism/types";
import { Game } from "../Game";
import { PhysicsWorld } from "../PhysicsWorld";
export type Tag = "normal";

export type EntityId = string;

let nextId = 0;

export abstract class Entity {
	/**
	 * Autogenerated unique ID for each entity. Not intended to be human-readable.
	 */
	id: EntityId;
	game: Game;
	body: phys.Body;
	model: EntityModel;

	constructor(game: Game, model: EntityModel, tags: Tag[] = [], id?: EntityId) {
		this.game = game;
		this.id = id ?? (++nextId).toString(16);
		this.model = model;
		this.body = new phys.Body({
			collisionFilterGroup: this.getBitFlag(),
		});
	}

	getPos(): Vector3 {
		return [this.body.position.x, this.body.position.y, this.body.position.z];
	}
	getRot(): phys.Quaternion {
		return this.body.quaternion;
	}
	addToWorld(world: PhysicsWorld): void {
		world.addBody(this.body);
	}
	removeFromWorld(world: PhysicsWorld): void {
		world.removeBody(this.body);
	}

	onCollide(otherEntity: Entity): void {
		// console.log("wow collide");
	}

	serialize(): ModelInstance {
		return {
			model: this.model,
			transform: Array.from(
				mat4.fromRotationTranslation(mat4.create(), this.body.quaternion.toArray(), this.body.position.toArray()),
			),
			interpolate: {
				id: this.id,
				duration: SERVER_GAME_TICK,
			},
		};
	}

	tick() {}

	/**
	 * Used for collisions and selecting items so that you can jump on both ramps
	 * and crafting tables, as well as not pick up items through walls.
	 */
	static readonly EPSILON = 0.1;

	getBitFlag(): number {
		return -1;
		/*if (this.tags.size == 0) return -1;	

		let flag = 0;

		if (flag == 0) return -1;
		return flag;*/
	}

	/** For logging entities to the console while debugging */
	toString(tag = ""): string {
		// Return class name
		return `${this.constructor.name}${tag}(${this.getPos().map((n) => n.toFixed(0))})`;
	}
}
